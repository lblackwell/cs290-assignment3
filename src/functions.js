/**
* the \@param notation indicates an input paramater for a function. For example
* @param {string} foobar - indicates the function should accept a string
* and it should be called foobar, for example function(foobar){}
* \@return is the value that should be returned
*/

/**
* Write a function called `uselessFunction`.
* It should accept no arguments.
* It should return the null value.
* @return {null} - 'useless'.
*/

//your code here
function uselessFunction()
{
	return null;
}
//end your code

var bar = 'not a function';
var barType = typeof bar;

/**
* Assign the above variable 'bar' to an anonymous function with the following
* properites.
* @param {float[]} doubleArray - an array of floating point numbers.
* The function should multiply every number in the array by 2 (this should
* change the content of the array).
* @return {boolean} - true if the operation was sucessful, false otherwise.
* This should return false if any value in the array cannot be doubled.
*/

//your code here
bar = function(doubleArray)
{
	for(var i = 0; i < doubleArray.length; i++)
	{
		if(isNaN(doubleArray[i]))
		{
			return false;
		}
		else
		{
			doubleArray[i] = (doubleArray[i] * 2);
		}
	}
	return true;
};
//end your code

/**
* Creates a new GitLog
* @class
* @property {string} hash - the hash of the commit
* @property {Date} date - the date of the commit as a JS Date object
* @property {string} message - the commit message
*/
function GitLog(hash, date, message) {
    this.hash = hash;
    this.date = date;
    this.message = message;
}

/**
* Create a function called parseGit to parse Git commit logs
* The logs will be generated by the following command
* git log --pretty=format:"%h %ad \"%s\"" --date=rfc
* The result looks like this
* 3782618 Wed, 7 Jan 2015 21:42:26 -0800 "Initial commit"
* |hash | |             date           | |   message    |
* There will always be a space between the hash and date and between the date
* and the first " of the commit message.
*
* You will covert these into GitLog objects with the following properties:
*
*
* @param {array.<string>} logArray - an array of Git commit messages of the
* above
* format.
* @return {array.<GitLog>} - return an array GitLog instances
*/

//your code here
function parseGit(logArray)
{
	var gitLogArray = new Array(50);

	for(var i = 0; i < logArray.length; i++) // Access each commit log
	{
		// Split the raw string by spaces
		var splitLog = logArray[i].split(" ");

		// Everything before first space is the hash
		var hash = splitLog[0];

		// Split time into hours, minutes, seconds
		var splitTime = splitLog[5].split(":");

		// Adjust hour
		var adjustPlusMinus = splitLog[6].substr(0, 1);
		var adjustBy = adjustPlusMinus + splitLog[6].substr(1, 2);
		var adjustBy = parseInt(adjustBy);
		alert("Orig hour: " + splitTime[0]);
		splitTime[0] = parseInt(splitTime[0]) + adjustBy;
		alert("New hour: " + splitTime[0]);

		// Convert month to digits
		if(splitLog[3] == "Jan")
		{
			splitLog[3] = 01;
		}
		else if(splitLog[3] == "Feb")
		{
			splitLog[3] = 02;
		}
		else if(splitLog[3] == "Mar")
		{
			splitLog[3] = 03;
		}
		else if(splitLog[3] == "Apr")
		{
			splitLog[3] = 04;
		}
		else if(splitLog[3] == "May")
		{
			splitLog[3] = 05;
		}
		else if(splitLog[3] == "Jun")
		{
			splitLog[3] = 06;
		}
		else if(splitLog[3] == "Jul")
		{
			splitLog[3] = 07;
		}
		else if(splitLog[3] == "Aug")
		{
			splitLog[3] = 08;
		}
		else if(splitLog[3] == "Sep")
		{
			splitLog[3] = 09;
		}
		else if(splitLog[3] == "Oct")
		{
			splitLog[3] = 10;
		}
		else if(splitLog[3] == "Nov")
		{
			splitLog[3] = 11;
		}
		else if(splitLog[3] == "Dec")
		{
			splitLog[3] = 12;
		}
		else
		{
			splitLog[3] = undefined;
		}

		// Create Date object with the next six pieces of the log
		var date = new Date(splitLog[4], splitLog[3], splitLog[2], splitTime[0], splitTime[1], splitTime[2]);
		/* alert("Year: " + splitLog[4]);
		alert("Month: " + splitLog[3]);
		alert("Day: " + splitLog[2]);
		alert("Hour: " + splitTime[0]);
		alert("Min: " + splitTime[1]);
		alert("Sec: " + splitTime[2]); */

		// Everything from the 8th item onward is the commit message
		var message = "";
		for(var j = 7; j < splitLog.length; j++)
		{
			// Remove quotation marks from first and last word
			if(j === 7)
			{
				splitLog[j] = splitLog[j].substr(1);
			}
			if(j === splitLog.length - 1)
			{
				splitLog[j] = splitLog[j].substr(0, splitLog[j].length - 1);
			}

			// If this is the first word, don't add a space. Otherwise, do.
			if(j === 7)
			{
				message = message + splitLog[j];
			}
			else
			{
				message = message + " " + splitLog[j];
			}
		}

		// Combine all of this into a GitLog object
		var thisLog = new GitLog(hash, date, message);

		// Add object to array
		gitLogArray[i] = thisLog;
	}

	return gitLogArray;
}
//end your code